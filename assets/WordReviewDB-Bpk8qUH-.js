import{d as W,e as R,o as l}from"./WordRecordDB-BqD9hT0y.js";import{r as p}from"./request-gJ70rrDV.js";function I(){return{EF:2.5,interval:0,repetitions:0}}function T({EF:i,interval:t,repetitions:s},a){return a?(s+=1,s===1?t=1:s===2?t=6:t=Math.round(t*i),i=Math.min(2.5,i+.1)):(s=0,t=1,i=Math.max(1.3,i-.2)),{EF:i,interval:t,repetitions:s}}function c(i){return p.get("/api/wordSm2/upsertData",{params:i})}const N={INITIAL_EF:2.5},e={WORD:"word",EF:"EF",INTERVAL:"interval",REPETITIONS:"repetitions",NEXT_REVIEW:"next_review"};class m{constructor(){this.dbName="wordReviewDB",this.storeName="words",this.db=null,this.version=3}async init(){return this.db?this.db:(this.db=await l(this.dbName,this.version,{upgrade(t){t.objectStoreNames.contains("words")||t.createObjectStore("words",{keyPath:e.WORD}).createIndex(e.NEXT_REVIEW,e.NEXT_REVIEW,{unique:!1})}}),this.db)}async addWord(t){const s={[e.WORD]:t,[e.EF]:N.INITIAL_EF,[e.INTERVAL]:0,[e.REPETITIONS]:0,[e.NEXT_REVIEW]:Date.now()};return await this.init(),this.putWord(s)}async putWord(t){return await this.init(),this.db.put(this.storeName,t)}async getTodayWords(){return await this.init(),this.getWordsToReview(new Date)}async getWordsToReview(t=null){await this.init();const a=this.db.transaction(this.storeName,"readonly").store.index(e.NEXT_REVIEW);if(t){const r=t;r.setHours(0,0,0,0);const n=r.getTime();r.setHours(23,59,59,999);const o=r.getTime();return a.getAll(window.IDBKeyRange.bound(n,o))}else return[]}async processReview(t,s){await this.init();let a=await this.getWord(t)||I();const{[e.EF]:r,[e.INTERVAL]:n,[e.REPETITIONS]:o}=a;let{EF:h,interval:w,repetitions:E}=T({EF:r,interval:n,repetitions:o},!!s);const d={...a,[e.EF]:h,[e.INTERVAL]:w,[e.REPETITIONS]:E,[e.NEXT_REVIEW]:Date.now()+n*24*60*60*1e3,[e.WORD]:t};return console.log("updatedWordData",d),await this.putWord(d),d}async importWord(t){return await this.init(),await this.getWord(t[e.WORD])?await this.putWord(t):await this.addWord(t[e.WORD])}async getWord(t){return await this.init(),this.db.get(this.storeName,t)}async getWords(t){return await this.init(),await Promise.all(t.map(s=>this.getWord(s)))}async getAllWords(){return await this.init(),this.db.getAll(this.storeName)}async deleteWord(t){return await this.init(),this.db.delete(this.storeName,t)}}const u=new m;u.init();async function f(i){return R(i),c({word:i,pass:0}),await u.processReview(i,1)}async function y(i){return W(i),c({word:i,pass:0}),await u.processReview(i,0)}export{y as f,f as p,u as w};
